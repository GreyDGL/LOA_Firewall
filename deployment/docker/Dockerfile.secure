# Secure Multi-stage build for client distribution
# This Dockerfile compiles Python code and removes source files
FROM python:3.12-slim as builder

ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Set working directory
WORKDIR /app

# Copy poetry files
COPY pyproject.toml poetry.lock* ./

# Configure poetry to not create virtual environment
RUN poetry config virtualenvs.create false

# Install Python dependencies
RUN poetry install --only=main --no-root

# Install Ollama
RUN curl -fsSL https://ollama.ai/install.sh | sh

# Copy source code for compilation
COPY . .

# Compile Python source to bytecode and remove source files
RUN python3 -m py_compile *.py && \
    python3 -m compileall . && \
    find . -name "*.py" -not -path "./venv/*" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + || true

# Create minimal runtime files
RUN mkdir -p /app/runtime && \
    cp -r filters/ /app/runtime/ 2>/dev/null || true && \
    cp -r guards/ /app/runtime/ 2>/dev/null || true && \
    cp -r blacklists/ /app/runtime/ 2>/dev/null || true && \
    cp config.json /app/runtime/ 2>/dev/null || true

# Production stage - minimal and secure
FROM python:3.12-slim as production

ENV DEBIAN_FRONTEND=noninteractive

# Create non-root user
RUN groupadd -r firewall && useradd -r -g firewall firewall

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy Ollama from builder
COPY --from=builder /usr/local/bin/ollama /usr/local/bin/ollama

# Create app directories
RUN mkdir -p /app/logs /home/firewall/.ollama && \
    chown -R firewall:firewall /app /home/firewall

WORKDIR /app

# Copy only compiled bytecode and necessary runtime files
COPY --from=builder --chown=firewall:firewall /app/*.pyc ./
COPY --from=builder --chown=firewall:firewall /app/runtime/ ./

# Create a minimal startup script
RUN echo '#!/bin/bash\npython3 firewall_service.pyc "$@"' > /app/start.sh && \
    chmod +x /app/start.sh && \
    chown firewall:firewall /app/start.sh

# Switch to non-root user
USER firewall

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV LLM_FIREWALL_CONFIG=/app/config.json
ENV LLM_FIREWALL_LICENSE=/app/license.key
ENV LLM_FIREWALL_HOST=0.0.0.0
ENV LLM_FIREWALL_PORT=5001

# Expose firewall API port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Use the startup script
CMD ["/app/start.sh"]