# Secure client distribution Dockerfile
# This removes source code and uses compiled Python modules
FROM python:3.12-slim as builder

ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

WORKDIR /app

# Copy poetry files and install dependencies
COPY pyproject.toml poetry.lock* ./
RUN poetry config virtualenvs.create false && \
    poetry install --only=main --no-root

# Install Ollama
RUN curl -fsSL https://ollama.ai/install.sh | sh

# Copy source code
COPY . .

# Compile all Python files to bytecode and remove source
RUN python3 -O -m compileall -b . && \
    find . -name "*.py" -not -path "./build/*" -delete && \
    find . -name "*.pyc" -exec mv {} {}.bak \; && \
    find . -name "*.pyc.bak" | while read f; do mv "$f" "${f%.bak}"; done

# Create production stage
FROM python:3.12-slim as production

ENV DEBIAN_FRONTEND=noninteractive

# Create non-root user
RUN groupadd -r firewall && useradd -r -g firewall firewall

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages and Ollama from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /usr/local/bin/ollama /usr/local/bin/ollama

# Create directories
RUN mkdir -p /app/logs /home/firewall/.ollama && \
    chown -R firewall:firewall /app /home/firewall

WORKDIR /app

# Copy only compiled bytecode and essential files (no source code)
COPY --from=builder --chown=firewall:firewall /app/*.pyc ./
COPY --from=builder --chown=firewall:firewall /app/src/ ./src/
COPY --from=builder --chown=firewall:firewall /app/config/ ./config/

# Create a wrapper script to run the bytecode
RUN echo '#!/bin/bash\ncd /app\npython3 run.pyc "$@"' > /app/start_firewall.sh && \
    chmod +x /app/start_firewall.sh && \
    chown firewall:firewall /app/start_firewall.sh

USER firewall

# Environment variables
ENV PYTHONUNBUFFERED=1
ENV LLM_FIREWALL_CONFIG=/app/config.json
ENV LLM_FIREWALL_LICENSE=/app/license.key
ENV LLM_FIREWALL_HOST=0.0.0.0
ENV LLM_FIREWALL_PORT=5001

EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

CMD ["/app/start_firewall.sh"]